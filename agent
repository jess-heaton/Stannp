// Function to check the current time and load the chatbot if it's outside office hours (9 AM to 5 PM)
function shouldLoadChatbot() {
    var currentTime = new Date(); // Get the current date and time
    var currentHour = currentTime.getHours(); // Extract the current hour (0-23)

    // Load the chatbot if the current time is before 9 AM or after 5 PM
    if (currentHour < 9 || currentHour >= 17) {
        
        // Define the FormExtension which handles the custom form logic for the chatbot
        const FormExtension = {
          name: 'Forms', // Name of the extension
          type: 'response', // Type of extension
          match: ({ trace }) => trace.type === 'ext_form' || trace.payload.name === 'ext_form', // Match function to identify when to trigger this extension
          render: ({ trace, element }) => { // Render function to create the form
            const formContainer = document.createElement('form'); // Create a form element
            formContainer.innerHTML = `
              <style>
                /* Styling for the form */
                label { font-size: 0.8em; color: #888; }
                input[type="text"], input[type="email"], input[type="tel"] { width: 100%; border: none; border-bottom: 0.5px solid rgba(0, 0, 0, 0.1); background: transparent; margin: 5px 0; outline: none; }
                .invalid { border-color: red; }
                .submit { background: linear-gradient(to right, #2e6ee1, #2e7ff1); border: none; color: white; padding: 10px; border-radius: 5px; width: 100%; cursor: pointer; }
              </style>
              <!-- Form fields for Name, Email, Phone, Company, and Message -->
              <label for="name">Name</label>
              <input type="text" class="name" name="name" required><br><br>
              <label for="email">Email</label>
              <input type="email" class="email" name="email" required pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$" title="Invalid email address"><br><br>
              <label for="phone">Phone Number</label>
              <input type="tel" class="phone" name="phone" required pattern="\\d+" title="Invalid phone number, please enter only numbers"><br><br>
              <label for="company">Company Name</label>
              <input type="text" class="company" name="company" required><br><br>
              <label for="message">Message</label>
              <input type="text" class="message" name="message" required><br><br>
              <input type="submit" class="submit" value="Submit">
            `;
            
            // Add an event listener to handle form submission
            formContainer.addEventListener('submit', function (event) {
              event.preventDefault(); // Prevent the default form submission
              const name = formContainer.querySelector('.name'); // Get the name input value
              const email = formContainer.querySelector('.email'); // Get the email input value
              const phone = formContainer.querySelector('.phone'); // Get the phone input value
              const company = formContainer.querySelector('.company'); // Get the company input value
              const message = formContainer.querySelector('.message'); // Get the message input value
              
              // Validate the inputs, add error styling if invalid
              if (!name.checkValidity() || !email.checkValidity() || !phone.checkValidity() || !company.checkValidity() || !message.checkValidity()) {
                name.classList.add('invalid');
                email.classList.add('invalid');
                phone.classList.add('invalid');
                company.classList.add('invalid');
                message.classList.add('invalid');
                return;
              }

              // Remove the submit button after successful submission
              formContainer.querySelector('.submit').remove();

              // Trigger the chatbot's interact function to handle the form data
              window.voiceflow.chat.interact({
                type: 'complete',
                payload: { name: name.value, email: email.value, phone: phone.value, company: company.value, message: message.value },
              });
            });

            // Append the form to the provided element in the chat widget
            element.appendChild(formContainer);
          }
        }

        // Load the Voiceflow widget script and initialize it
        const widgetScript = document.createElement('script');
        widgetScript.src = 'https://cdn.voiceflow.com/widget/bundle.mjs'; // URL to the Voiceflow chatbot script
        widgetScript.onload = function() {
          // Initialize the chatbot with the FormExtension
          window.voiceflow.chat.load({
            verify: { projectID: '66b29486a8a8fd6c4797f9dd' }, // Replace with your actual Voiceflow project ID
            url: 'https://general-runtime.voiceflow.com', // Voiceflow runtime URL
            versionID: 'production', // Specify the version of the project
            assistant: {
              extensions: [FormExtension] // Include the custom form extension
            }
          });
        };
        document.head.appendChild(widgetScript); // Append the script to the document
    }
}

// Run the function when the page loads
shouldLoadChatbot();
